<tool id="cnvsim" name="Simulate CNV" version="0.9.2">
    <description>in NGS short reads </description>
    <command interpreter="python" detect_errors="exit_code">
        #if $type.simulation_type=="whole_genome"
            cnv-sim.py -n $number_of_reads -l $read_length -g $regions_count -a $amplifications_percentage -d $deletions_percentage -cn_min $minimum_copy_number -cn_max $maximum_copy_number -r_min $minimum_region_length -r_max $maximum_region_length genome $reference
        #else
            cnv-sim.py -n $number_of_reads -l $read_length -g $regions_count -a $amplifications_percentage -d $deletions_percentage -cn_min $minimum_copy_number -cn_max $maximum_copy_number -r_min $minimum_region_length -r_max $maximum_region_length exome $reference $target
        #end if
    </command>
    <inputs>
        <conditional name="type">
            <param name="simulation_type" type="select" label="Simulation Type">
                <option value="whole_genome">CNV Simulation in Whole Genome Sequencing</option>
                <option value="targeted_exome">CNV Simulation in Targeted Exome Sequencing</option>
            </param>
            <when value="whole_genome">
                <param format="fasta" name="reference" type="data" label="Reference Genome" help="Reference genome to generate reads from"/>
            </when>
            <when value="targeted_exome">
                <param format="fasta" name="reference" type="data" label="Reference Genome" help="Reference genome to generate reads from"/>
                <param format="bed" name="target" type="data" label="Target Regions" help="a list of exonic regions"/>
            </when>
        </conditional>
        <param name="number_of_reads" type="integer" value="100000" label="Number of Reads" help="determines the number of reads to be generated for the control and simulated CNV (approximately)"/>
        <param name="read_length" type="integer" value="100" label="Read Length (bp)" help="determines the read length fot the generated FASTQ files"/>
        
        <param name="regions_count" type="integer" value="30" label="Regions Count" help="determines how many randomly-generated regions will show CNVs"/>
        <param name="minimum_region_length" type="integer" value="1000" label="Minimum Region Length" help="Minimum length of each CNV region"/>
        <param name="maximum_region_length" type="integer" value="100000" label="Maximum Region Length" help="Minimum length of each CNV region"/>
        <param name="amplifications_percentage" type="float" value="0.5" label="Percentage of amplifications" help="determines what fraction of the regions will show amplifications (range: 0.0-1.0)"/>
        <param name="deletions_percentage" type="float" value="0.5" label="Percentage of deletions" help="determines what fraction of the regions will show deletions (range: 0.0-1.0)"/>
        <param name="minimum_copy_number" type="integer" value="3" label="Variation minimum" help="determines the minumum number of amplifications/deletions introduced in each region"/>
        <param name="maximum_copy_number" type="integer" value="10" label="Variation maximum" help="determines the maximum number of amplifications/deletions introduced in each region"/>
        
    </inputs>
    <outputs>
        <data format="bed" name="cnv_list" from_work_dir="simulation_output/copynumber.bed" label="CNV List from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="control_1" from_work_dir="simulation_output/control_1.fastq" label="Control reads 1 from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="control_2" from_work_dir="simulation_output/control_2.fastq" label="Control reads 2 from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="cnv_1" from_work_dir="simulation_output/cnv_1.fastq" label="CNV reads 1 from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="cnv_2" from_work_dir="simulation_output/cnv_2.fastq" label="CNV reads 2 from ${tool.name} on ${on_string}"/>
    </outputs>
    <help><![CDATA[ 
        .. class:: infomark
        '''TIP''' This tool requires *fasta* format.
        ----
        **CNV Simulator**
        In genomics, Copy Number Variations (CNVs) is a type of structural variation in a genome where sections of the genome are duplicated or deleted. The number of variations (duplications/deletions) varies between individuals in the human population.

        The Copy Number Variation Simulator (CNV-Sim) is a simulation tool that extends the functionality of existing next-generation sequencing read simulators to introduce copy number variations in the generated reads. The resulting reads encompass amplifications as well as deletions according to a predefined list of variant regions.

        CNV-Sim aids testing and benchmarking tools for copy number variation detection and analysis. The tool offers two types of simulation:

        CNV-Sim offers two types of simulation:
        1. CNV simulation in whole genome. CNV-Sim utilizes the functionality of ART to introduce variations in the genome.
        2. CNV simulation in targeted exome. CNV-Sim utilizes the functionality of Wessim to introduce variations in the targets.

        Homepage: http://nabavilab.github.io/CNV-Sim/ 
    ]]></help>
</tool>