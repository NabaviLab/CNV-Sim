<tool id="cnvsim" name="Simulate CNV" version="0.9.0">
    <description>in NGS short reads </description>
    <command interpreter="python" detect_errors="exit_code">
        #if $type.simulation_type=="whole_genome"
            cnv-sim.py -n $number_of_reads -l $read_length -g $regions_count -a $amplifications -d $deletions -min $minimum -max $maximum genome $reference
        #else
            cnv-sim.py -n $number_of_reads -l $read_length -g $regions_count -a $amplifications -d $deletions -min $minimum -max $maximum exome $reference $target
        #end if
    </command>
    <inputs>
        <conditional name="type">
            <param name="simulation_type" type="select" label="Simulation Type">
                <option value="whole_genome">CNV Simulation in Whole Genome</option>
                <option value="whole_exome">CNV Simulation in Exome Regions</option>
            </param>
            <when value="whole_genome">
                <param format="fasta" name="reference" type="data" label="Reference Genome" help="Reference genome to generate reads from"/>
            </when>
            <when value="whole_exome">
                <param format="fasta" name="reference" type="data" label="Reference Genome" help="Reference genome to generate reads from"/>
                <param format="bed" name="target" type="data" label="Target Regions" help="a list of exonic regions"/>
            </when>
        </conditional>
        <param name="number_of_reads" type="integer" value="100000" label="Number of Reads" help="determines the number of reads to be generated for the control and simulated CNV (approximately)"/>
        <param name="read_length" type="integer" value="100" label="Read Length (bp)" help="determines the read length fot the generated FASTQ files"/>
        
        <param name="regions_count" type="integer" value="30" label="Regions Count" help="determines how many randomly-generated regions will show CNVs"/>
        <param name="amplifications" type="float" value="0.5" label="Percentage of amplifications" help="determines what fraction of the regions will show amplifications (range: 0.0-1.0)"/>
        <param name="deletions" type="float" value="0.2" label="Percentage of deletions" help="determines what fraction of the regions will show deletions (range: 0.0-1.0)"/>
        <param name="minimum" type="integer" value="3" label="Variation minimum" help="determines the minumum number of amplifications/deletions introduced in each region"/>
        <param name="maximum" type="integer" value="10" label="Variation maximum" help="determines the maximum number of amplifications/deletions introduced in each region"/>
        
    </inputs>
    <outputs>
        <data format="bed" name="cnv_list" from_work_dir="test/CNVList.bed" label="CNV List from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="control_1" from_work_dir="test/control_1.fastq" label="Control reads 1 from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="control_2" from_work_dir="test/control_2.fastq" label="Control reads 2 from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="cnv_1" from_work_dir="test/cnv_1.fastq" label="CNV reads 1 from ${tool.name} on ${on_string}"/>
        <data format="fastq" name="cnv_2" from_work_dir="test/cnv_2.fastq" label="CNV reads 2 from ${tool.name} on ${on_string}"/>
    </outputs>
    <help><![CDATA[ 
        .. class:: infomark
        '''TIP''' This tool requires *fasta* format.
        ----
        **CNV Simulator**
        In genomics, Copy Number Variations (CNVs) is a type of structural variation in a genome where sections of the genome are repeated. The number if repetitions (duplications) varies between individuals in the human population.

        The Copy Number Variation Simulator (CNV Sim) is a tool used to generate a set of artificial DNA fragments for Next Generation Sequencing (NGS) read simulation. When aligned back to the reference genome, the artificial generated reads show variations in the CNV regions. Variations can be either amplifications of deletions.

        CNV-Sim offers two types of simulation:
        1. CNV simulation in whole genome. CNV-Sim wraps the functionality of ART to introduce variations in the genome.
        2. CNV simulation in whole exome. CNV-Sim wraps the functionality of Wessim to introduce variations in the targets.

        Homepage: http://nabavilab.github.io/CNV-Sim/ 
    ]]></help>
</tool>